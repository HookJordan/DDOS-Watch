using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Web;

namespace DDOS_Watch.Watch
{
    class Enums
    {
        public enum NotificationType 
        {
            Online = 0,
            Offline = 1
        }
    }
    class EmailAccount
    {
        /// <summary>
        /// Email address 
        /// </summary>
        public string Address { get; set; }
        /// <summary>
        /// Password for email account 
        /// </summary>
        public string Password { get; set; }
        /// <summary>
        /// SMTP Server address 
        /// </summary>
        public string SMTP_SERVER { get; set; }
        /// <summary>
        /// SMTP Port 
        /// </summary>
        public int SMTP_PORT { get; set; }
        /// <summary>
        /// SMTP index for well known smtp 
        /// </summary>
        public int SMTP_INDEX { get; set; }

        //flag for if error occurs 
        public bool SendError = false; 

        /// <summary>
        /// Sending notification email 
        /// </summary>
        /// <param name="s">The server the notification is about</param>
        /// <param name="type">The type of notification</param>
        public void SendNotificationEmail(Server s, Enums.NotificationType type)
        {
            //Start creating new notification email 
            StringBuilder sb = new StringBuilder();
            string title = string.Empty;
            sb.AppendLine("Dear " + Address + ",");
            sb.AppendLine("");
            switch(type)
            {
                case Enums.NotificationType.Online:
                    //notify user a server has come back online 
                    title = "DDOS WATCH NOTIFICATION: SERVER: " + s.IP + ":" + s.PORT + " IS NOW ONLINE";
                    sb.AppendLine("DDOS WATCH is happy to inform you that one of your servers has just come back online!");
                    sb.AppendLine("Server Information: ");
                    sb.AppendLine("IP: " + s.IP);
                    sb.AppendLine("PORT: " + s.PORT);
                    sb.AppendLine("TIME STAMP: " + DateTime.Now.ToString("HH:mm:ss d/m/y"));
                    break;
                case Enums.NotificationType.Offline:
                    //notify user that a server has gone offline 
                    title = "***DDOS WATCH NOTIFICATION: SERVER: " + s.IP + ":" + s.PORT + " IS OFFLINE***";
                    sb.AppendLine("DDOS WATCH regrets to inform you that one of your servers has been detected as offline.");
                    sb.AppendLine("Server Information: ");
                    sb.AppendLine("IP: " + s.IP);
                    sb.AppendLine("PORT: " + s.PORT);
                    sb.AppendLine("TIME STAMP: " + DateTime.Now.ToString("HH:mm:ss d/m/y"));
                    sb.AppendLine("");
                    sb.AppendLine("If this downtime was not scheduled by you then your server maybe under attack. Please contact your server administrator immediately for further assistance. If you are the administrator it is reconmended that you check your server settings before assuming that this is a DDOS attack.");
                   break;
            }
            sb.AppendLine("");
            sb.AppendLine("---");
            sb.AppendLine("This message was generated by DDOS WATCH, a game server management tool developed by www.jordanhook.com");
                    
            //try to send the email 
            notify(title, sb.ToString());
        }

        /// <summary>
        /// This method will send the actual email message 
        /// </summary>
        /// <param name="title"></param>
        /// <param name="msg"></param>
        private void notify(string title, string msg)
        {
            try
            {
                //Create new mail message 
                MailMessage m = new MailMessage();
                
                //Assign mail information 
                m.From = new MailAddress(Address);
                m.To.Add(new MailAddress(Address));

                //assign message information 
                m.Subject = title;
                m.Body = msg;

                //Create new email client with email settings 
                SmtpClient s = new SmtpClient(SMTP_SERVER, SMTP_PORT);
                s.UseDefaultCredentials = false;
                s.EnableSsl = true;

                //provide email authentication 
                s.Credentials = new NetworkCredential(Address, Password);

                //try to send the meail 
                s.Send(m);
                s = null;

                m.Dispose();

                //set flag to no error 
                SendError = false;
            } 
            catch (Exception) //for debugging 
            {
                //error occured, set flag true 
                SendError = true;
            }
        }
    }
}
